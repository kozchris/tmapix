/*
 * Gradle 0.9 build file.
 * 
 * - Download Gradle from <http://www.gradle.org/>
 * - Execute gradle build
 */
group = 'org.tmapix'
version = '0.4.0'

apply plugin: 'java'
apply plugin: 'osgi'
apply plugin: 'maven'
apply plugin: 'eclipse'

defaultTasks 'clean', 'build'

project.projectName = 'TMAPIX I/O'
project.projectDescription = 'TMAPIX I/O' //TODO
project.vendorName = 'Semagia'
project.vendorURL = 'http://www.semagia.com/'
project.licenseName = 'Apache Software License, Version 2.0'
project.licenseURL = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
project.projectURL = 'http://www.tmapix.org/'

REP_SEMAGIA = 'http://repository.semagia.com/releases/'
REP_SEMAGIA_SNAPSHOT = 'http://repository.semagia.com/snapshots/'
REP_TINYTIM = 'http://tinytim.sourceforge.net/maven-repository/'
REP_TINYTIM_SNAPSHOT = 'http://tinytim.sourceforge.net/maven-repository/snapshots/'
REP_TMAPI = 'http://www.tmapi.org/maven-repository/'
REP_TMAPI_SNAPSHOT = 'http://www.tmapi.org/maven-repository/snapshots/'
REP_ONTOPIA_SNAPSHOT = 'https://ontopia.googlecode.com/svn/maven-snapshot-repository/'
REP_ONTOPIA = 'https://ontopia.googlecode.com/svn/maven-repository'
REP_MAJORTOM = 'http://maven.topicmapslab.de/public/'

gradle.taskGraph.whenReady {taskGraph ->
   if (!taskGraph.hasTask(':release')) {
       version += '-SNAPSHOT'
   }
}

repositories {
    mavenCentral()
    mavenRepo urls: REP_TMAPI
    mavenRepo urls: REP_TINYTIM
    mavenRepo urls: REP_TINYTIM_SNAPSHOT
    mavenRepo urls: REP_ONTOPIA
    mavenRepo urls: REP_ONTOPIA_SNAPSHOT
    mavenRepo urls: 'http://repository.jboss.com/maven2/'
    mavenRepo urls: REP_SEMAGIA_SNAPSHOT
    mavenRepo urls: REP_MAJORTOM
}

configurations {
    compiledep
}

dependencies {
    compile 'org.tmapi:tmapi:2.0.2'
    compile 'org.slf4j:slf4j-api:(1.5.8,)'
    compile 'com.semagia.mio:mio-core:0.9.6-SNAPSHOT'
    compile 'com.semagia.mio:mio-syntaxpack:0.1.0-SNAPSHOT'
    
    // We need tinyTiM and Ontopia in the classpath at compile time
    // (and in Eclipse) but they shouldn't be exposed as dependency
    compiledep 'org.tmapix:tmapix-core:0.2.0-SNAPSHOT'
    compiledep 'org.tinytim:tinytim:2.0.1-SNAPSHOT'
    compiledep 'net.ontopia:ontopia-engine:5.1.0-SNAPSHOT@jar'
    compiledep 'net.ontopia:ontopia-mio:0.1.0-SNAPSHOT'
    
    testCompile 'junit:junit:4.8.1'
    testCompile 'com.semagia.mio:mio-core-tests:0.9.6-SNAPSHOT'
    
    // This sucks! Would be cool if "compiledep" dependencies 
    // could be used as testCompile deps *without* repeating the whole deps here
    testCompile 'org.tmapix:tmapix-core:0.2.0-SNAPSHOT'
    testCompile 'org.tinytim:tinytim:2.0.1-SNAPSHOT'
    testCompile 'net.ontopia:ontopia-engine:5.1.0-SNAPSHOT@jar'
    testCompile 'net.ontopia:ontopia-mio:0.1.0-SNAPSHOT'
    testCompile 'de.topicmapslab.majortom:majortom-inMemory:1.1.1-SNAPSHOT'
    testCompile 'de.topicmapslab.majortom:majortom-core:1.1.1-SNAPSHOT'

    testRuntime 'org.slf4j:slf4j-jdk14:(1.5.8,)'
}

sourceSets {
    main {
      compileClasspath = sourceSets.main.compileClasspath + configurations.compiledep
    }
}

task ontopiaTests(type: Test, dependsOn: jar) {
    testResultsDir = new File(project.testResultsDir, 'ontopia')
    testReportDir = new File(project.testReportDir, 'ontopia')
    classpath = test.classpath
    testClassesDir = test.testClassesDir
    systemProperties['org.tmapi.core.TopicMapSystemFactory'] = 'net.ontopia.topicmaps.impl.tmapi2.TopicMapSystemFactory'
}

task genericTMAPIOntopiaTests(type: Test, dependsOn: jar) {
    testResultsDir = new File(project.testResultsDir, 'generic-ontopia')
    testReportDir = new File(project.testReportDir, 'generic-ontopia')
    classpath = test.classpath
    testClassesDir = test.testClassesDir
    systemProperties['org.tmapi.core.TopicMapSystemFactory'] = 'org.tmapix.io.GenericTMAPITopicMapSystemFactoryOntopia'
}

task genericTMAPITinyTimTests(type: Test, dependsOn: jar) {
    classpath = test.classpath
    testClassesDir = test.testClassesDir
    systemProperties['org.tmapi.core.TopicMapSystemFactory'] = 'org.tmapix.io.GenericTMAPITopicMapSystemFactoryTinyTim'
}

task majortomTests(type: Test, dependsOn: jar) {
    testResultsDir = new File(project.testResultsDir, 'majortom')
    testReportDir = new File(project.testReportDir, 'majortom')
    //TODO: Remove the following line iff MajorTom produces no errors anymore
    ignoreFailures = true
    classpath = test.classpath
    testClassesDir = test.testClassesDir
    systemProperties['org.tmapi.core.TopicMapSystemFactory'] = 'de.topicmapslab.majortom.core.TopicMapSystemFactoryImpl'
}

build.dependsOn ontopiaTests
build.dependsOn majortomTests
//build.dependsOn genericTMAPIOntopiaTests
//build.dependsOn genericTMAPITinyTimTests

test.doFirst {
    systemProperties['org.tmapi.core.TopicMapSystemFactory'] = 'org.tinytim.core.TopicMapSystemFactoryImpl'
}

jar {
      manifest {
        name = projectName
        
        attributes 'Implementation-Version': project.version, 
                  'Implementation-Vendor': project.vendorName, 
                  'Implementation-URL': project.projectURL, 
                  'Sealed': 'false'
                  
        instruction 'Bundle-Vendor', project.vendorName
        instruction 'Bundle-License', project.licenseURL
        instruction 'Bundle-Description', project.projectDescription
        instruction 'Import-Package', 'org.tinytim.*;resolution:=optional, net.ontopia.*;resolution:=optional, !org.tmapix.io.*, *'
        instruction 'Export-Package', '!*.internal.*, *'
      }
}

task dist(dependsOn: [assemble, test]) << {
    def base_name = "$archivesBaseName-${project.version}"
    def base = "$distsDir/" + base_name
    def zips = "$buildDir/dist/$base_name"
    copy {
        into base
        from(libsDir)
        from(projectDir) {
            include 'README.txt'
            include 'LICENSE.txt'
            include 'CHANGES.txt'
            include 'NOTICE.txt'
        }
        from("$projectDir/src") {
            into 'src'
            exclude 'grammar/**'
            exclude '**/*.bak'
        }
        into('lib') {
            from configurations.runtime
        }
    }
    ant {
        tar destfile: zips + '.tar.gz', basedir: distsDir, compression: 'gzip', longfile: 'gnu'
        zip destfile: zips + '.zip', basedir: distsDir
    }
}

uploadArchives {
    repositories.mavenDeployer {
        repository(url: "file://$buildDir/maven-repo/")

        pom.project {
            name project.projectName
            description project.projectDescription
            url project.projectURL
            
            organization {
                name project.vendorName
                url project.vendorURL
            }
            licenses {
               license {
                  name project.licenseName
                  url project.licenseURL
               }
            }
            repositories {
               repository {
                  id 'ontopia'
                  url REP_ONTOPIA
               }
               repository {
                  id 'ontopia-snapshots'
                  url REP_ONTOPIA_SNAPSHOT
               }
               repository {
                  id 'tmapi'
                  url REP_TMAPI
               }
               repository {
                  id 'semagia-snapshots'
                  url REP_SEMAGIA_SNAPSHOT
               }
               repository {
                  id 'tinytim'
                  url REP_TINYTIM
               }
               repository {
                  id 'tinytim-snapshots'
                  url REP_TINYTIM_SNAPSHOT
               }
               repository {
                  id 'majortom'
                  url REP_MAJORTOM
               }
            }
        }
    }
}
