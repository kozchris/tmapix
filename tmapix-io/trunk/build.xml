<?xml version="1.0" encoding="utf-8"?>
<project name="tmapix-io" default="jar" basedir=".">
    <property file="build.properties"/>
    <tstamp/>
    <property name="release_type" value="-snapshot-${DSTAMP}${TSTAMP}"/>
    
    <property name="project.name" value="TMAPIX I/O"/>
    <property name="project.iri" value="http://www.tmapix.org/"/>

    <!-- Directories -->
    <property name="dir.src" value="${basedir}/src/main/java"/>
    <property name="dir.test" value="${basedir}/src/test/java"/>
    <property name="dir.cxtm" value="${basedir}/src/test/cxtm/"/>
    <property name="dir.lib" value="${basedir}/lib"/>
    <property name="dir.build" value="${basedir}/build"/>
    <property name="dir.dist.root" value="${dir.build}/dist"/>
    <property name="dir.build.classes" value="${dir.build}/classes"/>
    <property name="dir.build.tests" value="${dir.build}/tests"/>

    <!-- Libs -->
    <property name="lib.junit" value="${dir.lib}/junit-4.5.jar"/>
    
    <property name="lib.jing" value="${dir.lib}/jing.jar"/>
    <property name="lib.mio" value="${dir.lib}/semagia-mio-0.9.5.jar"/>
    <property name="lib.ctm" value="${dir.lib}/semagia-mio-ctm-0.9.3-working-draft-2009-02-18.jar"/>
    <property name="lib.jtm" value="${dir.lib}/semagia-mio-jtm-0.9.3.jar"/>
    <property name="lib.ltm" value="${dir.lib}/semagia-mio-ltm-0.9.5.jar"/>
    <property name="lib.rdf" value="${dir.lib}/semagia-mio-rdf-0.9.3.jar"/>
    <property name="lib.snello" value="${dir.lib}/semagia-mio-snello-0.9.3.jar"/>
    <property name="lib.tmxml" value="${dir.lib}/semagia-mio-tmxml-0.9.4.jar"/>
    <property name="lib.xtm" value="${dir.lib}/semagia-mio-xtm-0.9.5.jar"/>

    <path id="libs.tmapi-1">
        <fileset dir="${dir.lib}">
            <include name="tmapi-1*.jar"/>
            <include name="tmapix-commons-*.jar"/>
        </fileset>
    </path>

    <path id="libs.tmapi">
        <fileset dir="${dir.lib}">
            <include name="tmapi-2.*.jar"/>
            <include name="tmapix-commons-*.jar"/>
        </fileset>
    </path>

    <!-- tinyTiM -->
    <path id="libs.tinytim-1">
        <fileset dir="${dir.lib}">
            <include name="tinytim-1*.jar"/>
            <include name="tinytim-mio-1*.jar"/>
        </fileset>
    </path>    
    
    <path id="libs.tinytim">
        <fileset dir="${dir.lib}">
            <include name="tinytim-2*.jar"/>
            <include name="tinytim-mio-2*.jar"/>
        </fileset>
    </path>
    
   
    <!-- Ontopia incl. dependencies -->
    <path id="libs.ontopia">
        <fileset dir="${dir.lib}">
            <include name="ontopia-5.*jar"/>
            <include name="backport-util-concurrent-*.jar"/>
        </fileset>
    </path>
    
    <!-- The mio libs incl. dependencies -->
    <path id="libs.mio">
        <!-- Logging -->
        <fileset dir="${dir.lib}">
            <include name="slf4j-*"/>
        </fileset>
        <!-- Validation -->
        <pathelement location="${lib.jing}"/>
        <!-- The mio libs -->
        <pathelement location="${lib.mio}"/>
        <pathelement location="${lib.ctm}"/>
        <pathelement location="${lib.jtm}"/>
        <pathelement location="${lib.ltm}"/>
        <pathelement location="${lib.rdf}"/>
        <pathelement location="${lib.snello}"/>
        <pathelement location="${lib.tmxml}"/>
        <pathelement location="${lib.xtm}"/>
    </path>

    <path id="path.compile">
        <path refid="libs.tmapi"/>
        <path refid="libs.tinytim"/>
        <path refid="libs.ontopia"/>
        <path refid="libs.mio"/>
    </path>
    
    <path id="path.test">
        <path refid="path.compile"/>
        <pathelement location="${lib.junit}"/>
        <pathelement location="${dir.build.classes}"/>
        <pathelement location="${dir.build.tests}"/>
    </path>

    <path id="path.test-tmapi-1">
        <path refid="libs.tmapi-1"/>
        <path refid="libs.tinytim-1"/>
        <path refid="libs.mio"/>
        <pathelement location="${lib.junit}"/>
        <pathelement location="${dir.build.classes}"/>
        <pathelement location="${dir.build.tests}"/>
    </path>

    <target name="help">
        <echo message="------------------------"/>
        <echo message="${project.name} - Build file"/>
        <echo message="------------------------"/>
        <echo message=""/>
        <echo message="Available targets:"/>
        <echo message=""/>
        <echo message=" jar     Creates the jar"/>
        <echo message=" doc     Generates the Java Docs"/>
        <echo message=" release Creates the jar and a distributable file"/>
    </target>

    <target name="init">
        <property name="dist.version" value="${version}${version_suffix}${release_type}"/>
        <property name="dist.name" value="tmapix-io-${dist.version}"/>

        <property name="dir.dist" value="${dir.dist.root}/${dist.name}"/>
        <property name="dir.javadocs" value="${dir.dist}/docs/api"/>

        <property name="project.jar" value="${dist.name}.jar"/>
        <property name="project.tar" value="${dist.name}.tar"/>
        <property name="project.tar.gz" value="${project.tar}.gz"/>
        <property name="project.zip" value="${dist.name}.zip"/>
    </target>

    <!-- =================================================================== -->
    <!-- Clean targets                                                       -->
    <!-- =================================================================== -->
    <target name="clean" depends="init">
        <delete dir="${dir.build}"/>
        <delete dir="${dir.javadocs}"/>
    </target>
 
    <!-- =================================================================== -->
    <!-- Prepares the build directory                                        -->
    <!-- =================================================================== -->
    <target name="prepare" depends="init">
        <mkdir dir="${dir.build}"/>
        <mkdir dir="${dir.build.classes}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the Java Docs                                               -->
    <!-- =================================================================== -->
    <target name="doc" depends="init">
        <mkdir dir="${dir.javadocs}"/>
        <javadoc destdir="${dir.javadocs}"
            packagenames="org.tmapix.*"
            access="public"
            author="true"
            version="true"
            use="true"
            splitindex="true"
            noindex="false"
            windowtitle="${project.name} API v${dist.version}"
            doctitle="${project.name} v${dist.version}">
            <fileset dir="${dir.src}">
                <exclude name="net/**"/>
                <exclude name="org/tmapix/io/internal/**"/>
            </fileset>
<!--            
            <doclet name="net.gleamynode.apiviz.APIviz"
                path="${dir.lib}/apiviz-1.2.5.GA.jar">
            </doclet>
-->
            <link href="http://www.tmapi.org/2.0/api/"/>
        </javadoc>
    </target>

    <!-- =================================================================== -->
    <!-- Tests                                                               -->
    <!-- =================================================================== -->
    <target name="compile.tests" depends="compile">
        <mkdir dir="${dir.build.tests}"/>
        <javac destdir="${dir.build.tests}" 
            debug="${debug}"
            optimize="${optimize}"
            target="1.5"
            >
            <classpath refid="path.test"/>
            <src path="${dir.test}"/>
        </javac>
    </target>
    
    <target name="test" depends="compile.tests">
        <antcall target="test.ontopia"></antcall>
        <antcall target="test.generic.ontopia"></antcall>
        <antcall target="test.generic.tinytim"></antcall>
        <antcall target="test.tinytim"></antcall>
    </target>
    
    <target name="test.tinytim">
        <junit printsummary="true" showoutput="false"
            errorProperty="test.failed" failureProperty="test.failed">
            <sysproperty key="org.tinytim.cxtm-test-dir" value="${dir.cxtm}"/>
            <sysproperty key="org.tmapi.core.TopicMapSystemFactory" value="org.tinytim.core.TopicMapSystemFactoryImpl"/>
            <classpath refid="path.test"/>
            <formatter type="plain"/>
            <test name="org.tmapix.io.AllTests" 
                todir="${dir.build}" outfile="tinytim-results"/>
        </junit>
    </target>

    <target name="test.tinytim-1" depends="compile.tests">
        <junit printsummary="true" showoutput="false"
            errorProperty="test.failed" failureProperty="test.failed">
            <sysproperty key="org.tinytim.cxtm-test-dir" value="${dir.cxtm}"/>
            <sysproperty key="org.tmapi.core.TopicMapSystemFactory" value="org.tinytim.TopicMapSystemFactoryImpl"/>
            <classpath refid="path.test-tmapi-1"/>
            <formatter type="plain"/>
            <test name="org.tmapix.io.AllTests" 
                todir="${dir.build}" outfile="tinytim-1-results"/>
        </junit>
    </target>

    <target name="test.ontopia">
        <junit printsummary="true" showoutput="false"
            errorProperty="test.failed" failureProperty="test.failed">
            <sysproperty key="org.tinytim.cxtm-test-dir" value="${dir.cxtm}"/>
            <sysproperty key="org.tmapi.core.TopicMapSystemFactory" value="net.ontopia.topicmaps.impl.tmapi2.TopicMapSystemFactory"/>
            <classpath refid="path.test"/>
            <formatter type="plain"/>
            <test name="org.tmapix.io.AllTests" 
                todir="${dir.build}" outfile="ontopia-results"/>
        </junit>
    </target>

    <target name="test.generic.ontopia">
        <junit printsummary="true" showoutput="false"
            errorProperty="test.failed" failureProperty="test.failed">
            <sysproperty key="org.tinytim.cxtm-test-dir" value="${dir.cxtm}"/>
            <sysproperty key="org.tmapi.core.TopicMapSystemFactory" value="org.tmapix.io.GenericTMAPITopicMapSystemFactoryOntopia"/>
            <classpath refid="path.test"/>
            <formatter type="plain"/>
            <test name="org.tmapix.io.AllTests" 
                todir="${dir.build}" outfile="generic-ontopia-results"/>
        </junit>
    </target>

    <target name="test.generic.tinytim">
        <junit printsummary="true" showoutput="false"
            errorProperty="test.failed" failureProperty="test.failed">
            <sysproperty key="org.tinytim.cxtm-test-dir" value="${dir.cxtm}"/>
            <sysproperty key="org.tmapi.core.TopicMapSystemFactory" value="org.tmapix.io.GenericTMAPITopicMapSystemFactoryTinyTim"/>
            <classpath refid="path.test"/>
            <formatter type="plain"/>
            <test name="org.tmapix.io.AllTests" 
                todir="${dir.build}" outfile="generic-tinyim-results"/>
        </junit>
    </target>

    <!-- =================================================================== -->
    <!-- Compile source files                                                -->
    <!-- =================================================================== -->
    <target name="compile" depends="clean, prepare">
        <javac destdir="${dir.build.classes}"
            debug="${debug}"
            target="1.5"
            >
            <classpath refid="path.compile"/>
            <src path="${dir.src}"/>
        </javac>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the jar                                                     -->
    <!-- =================================================================== -->
    <target name="jar" depends="compile">
        <jar destfile="${dir.build}/${project.jar}">
            <fileset dir="${dir.build.classes}">
                <include name="**/*.*"/>
            </fileset>
            <manifest>
                <attribute name="Implementation-Title" value="${project.name}"/>
                <attribute name="Implementation-Version" value="${dist.version}"/>
                <attribute name="Implementation-URL" value="${project.iri}"/>
            </manifest>
        </jar>
    </target>

    <!-- =================================================================== -->
    <!-- Prepares a distribution                                             -->
    <!-- =================================================================== -->
    <target name="dist" depends="jar">
        <mkdir dir="${dir.dist}"/>

        <copy todir="${dir.dist}" file="${dir.build}/${project.jar}"/>

        <copy todir="${dir.dist}/src">
            <fileset dir="${dir.src}">
            </fileset>
        </copy>
        <copy todir="${dir.dist}/test">
            <fileset dir="${dir.test}"/>
        </copy>
        <copy todir="${dir.dist}/lib">
            <fileset dir="${dir.lib}">
                <exclude name="**/tmapi*.jar"/>
                <exclude name="**/tinytim*.jar"/>
                <exclude name="**/ontopia*.jar"/>
                <exclude name="**/backport*.jar"/>
                <exclude name="**/LICENSE.ontopia*"/>
                <exclude name="**/LICENSE.tinytim*"/>
                <exclude name="**/LICENSE.tmapi*"/>
                <exclude name="**/LICENSE.backport*"/>
            </fileset>
        </copy>
       
        <copy todir="${dir.dist}" file="CHANGES.txt"/>
        <copy todir="${dir.dist}" file="LICENSE.txt"/>
        <copy todir="${dir.dist}" file="README.txt"/>
    </target>

    <!-- =================================================================== -->
    <!-- Creates the distribution files (.zip and .tar.gz)                   -->
    <!-- =================================================================== -->
    <target name="release" depends="jar, doc, dist">
        <tar destfile="${dir.dist.root}/${project.tar}"
            basedir="${dir.dist.root}"/>
        <gzip src="${dir.dist.root}/${project.tar}"
            destfile="${dir.build}/${project.tar.gz}" />
        <delete file="${dir.dist.root}/${project.tar}" />
        <zip destfile="${dir.build}/${project.zip}" basedir="${dir.dist.root}"/>
    </target>
</project>
